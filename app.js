// Telegram Mini App: EcliptVPN
console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const app = document.getElementById('app');
const overlays = document.getElementById('ui-overlays');
const hasWebApp = Boolean(window.Telegram?.WebApp);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
if (hasWebApp) {
  window.Telegram.WebApp.ready();
  console.log('Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω');
}

// UI —Ñ—É–Ω–∫—Ü–∏–∏
function showToast(message, duration = 2500) {
  const toast = document.createElement('div');
  toast.className = 'toast';
  toast.textContent = message;
  overlays.appendChild(toast);
  setTimeout(() => toast.remove(), duration);
}

function showTooltip(target, text) {
  const tooltip = document.createElement('div');
  tooltip.className = 'tooltip';
  tooltip.textContent = text;
  overlays.appendChild(tooltip);
  
  const rect = target.getBoundingClientRect();
  tooltip.style.left = rect.left + window.scrollX + rect.width / 2 + 'px';
  tooltip.style.top = rect.top + window.scrollY - 32 + 'px';
  tooltip.classList.add('active');
  
  return tooltip;
}

function hideTooltip(tooltip) {
  if (tooltip?.classList?.contains('active')) {
    tooltip.classList.remove('active');
    setTimeout(() => tooltip.remove(), 200);
  }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –∫–ª–∏–∫–∞
function addClickAnimation(element) {
  element.style.transform = 'scale(0.95)';
  setTimeout(() => {
    element.style.transform = '';
  }, 150);
}

// –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function transitionToScreen(callback) {
  const currentScreen = app.querySelector('.screen.active');
  if (currentScreen) {
    currentScreen.style.opacity = '0';
    currentScreen.style.transform = 'translateX(20px)';
    setTimeout(callback, 200);
  } else {
    callback();
  }
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã
async function showMainMenu(user) {
  console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
  app.innerHTML = '';
  
  const mainMenu = document.createElement('section');
  mainMenu.id = 'mainMenu';
  mainMenu.className = 'screen active';
  
  mainMenu.innerHTML = `
    <div class="header">
      <h2>EcliptVPN</h2>
      <p class="welcome-text">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>${user?.first_name || '–ì–æ—Å—Ç—å'}</b>!</p>
    </div>
    <div class="menu-buttons">
      <button class="main-btn menu-btn" id="profileBtn">
        <span class="btn-icon">üë§</span>
        <span>–ü—Ä–æ—Ñ–∏–ª—å</span>
      </button>
      <button class="main-btn menu-btn" id="ordersBtn">
        <span class="btn-icon">üîí</span>
        <span>–ú–æ–∏ VPN</span>
      </button>
      <button class="main-btn menu-btn" id="topupBtn">
        <span class="btn-icon">üí≥</span>
        <span>–ü–æ–ø–æ–ª–Ω–∏—Ç—å</span>
      </button>
      <button class="main-btn menu-btn" id="promoBtn">
        <span class="btn-icon">üéÅ</span>
        <span>–ü—Ä–æ–º–æ–∫–æ–¥</span>
      </button>
    </div>
  `;
  
  app.appendChild(mainMenu);

  // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  mainMenu.querySelector('#profileBtn').onclick = () => {
    addClickAnimation(mainMenu.querySelector('#profileBtn'));
    setTimeout(() => showProfile(user), 150);
  };
  mainMenu.querySelector('#ordersBtn').onclick = () => {
    addClickAnimation(mainMenu.querySelector('#ordersBtn'));
    setTimeout(() => showOrders(user), 150);
  };
  mainMenu.querySelector('#topupBtn').onclick = () => {
    addClickAnimation(mainMenu.querySelector('#topupBtn'));
    setTimeout(() => showTopup(user), 150);
  };
  mainMenu.querySelector('#promoBtn').onclick = () => {
    addClickAnimation(mainMenu.querySelector('#promoBtn'));
    setTimeout(() => showPromo(user), 150);
  };
}

async function showProfile(user) {
  transitionToScreen(() => {
    app.innerHTML = '';
    const screen = document.createElement('section');
    screen.id = 'profile';
    screen.className = 'screen active profile';
    
    screen.innerHTML = `
      <div class="header">
        <button class="back-btn" id="backBtn">‚Üê</button>
        <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
      </div>
      <div class="profile-card">
        <div class="profile-avatar">
          <div class="avatar-circle">
            <span class="avatar-text">${(user.first_name || '–ì').charAt(0).toUpperCase()}</span>
          </div>
        </div>
        <div class="profile-details">
          <h3 class="profile-name">${user.first_name || ''} ${user.last_name || ''}</h3>
          <p class="profile-id">ID: ${user.id}</p>
          <div class="status-container">
            <span class="status-label">–°—Ç–∞—Ç—É—Å:</span>
            <span class="sub-status">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
        </div>
      </div>
      <div class="profile-stats">
        <div class="stat-item">
          <span class="stat-value">0</span>
          <span class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö VPN</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">‚ÇΩ0</span>
          <span class="stat-label">–ë–∞–ª–∞–Ω—Å</span>
        </div>
      </div>
    `;
    
    app.appendChild(screen);
    screen.querySelector('#backBtn').onclick = () => {
      addClickAnimation(screen.querySelector('#backBtn'));
      setTimeout(() => showMainMenu(user), 150);
    };
  });
  
  try {
    const res = await fetch('https://your-bot-backend/api/profile?user_id=' + user.id, {
      headers: hasWebApp ? { 'X-Telegram-InitData': window.Telegram.WebApp.initData } : {}
    });
    
    const data = await res.json();
    if (data.subscription) {
      screen.querySelector('.sub-status').textContent = data.subscription.status;
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', e);
    screen.querySelector('.sub-status').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
  }
}

async function showOrders(user) {
  transitionToScreen(() => {
    app.innerHTML = '';
    const screen = document.createElement('section');
    screen.id = 'orders';
    screen.className = 'screen active orders';
    
    screen.innerHTML = `
      <div class="header">
        <button class="back-btn" id="backBtn">‚Üê</button>
        <h2>–ú–æ–∏ VPN</h2>
      </div>
      <div class="orders-container">
        <div id="ordersList" class="loading">
          <div class="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ VPN...</p>
        </div>
      </div>
    `;
    
    app.appendChild(screen);
    screen.querySelector('#backBtn').onclick = () => {
      addClickAnimation(screen.querySelector('#backBtn'));
      setTimeout(() => showMainMenu(user), 150);
    };
  });
  
  try {
    const res = await fetch('https://your-bot-backend/api/orders?user_id=' + user.id, {
      headers: hasWebApp ? { 'X-Telegram-InitData': window.Telegram.WebApp.initData } : {}
    });
    
    const data = await res.json();
    const list = screen.querySelector('#ordersList');
    
    if (Array.isArray(data.orders) && data.orders.length) {
      list.className = 'vpn-list';
      list.innerHTML = data.orders.map(o => `
        <div class="vpn-card">
          <div class="vpn-header">
            <div class="vpn-icon">üîí</div>
            <div class="vpn-info">
              <h3 class="vpn-plan">${o.plan}</h3>
              <p class="vpn-country">${o.country}</p>
            </div>
            <div class="vpn-status active">–ê–∫—Ç–∏–≤–µ–Ω</div>
          </div>
          <div class="vpn-details">
            <div class="detail-item">
              <span class="detail-label">–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</span>
              <span class="detail-value">${o.expiry}</span>
            </div>
          </div>
          <button class="main-btn copy-btn" data-config="${o.config}">
            <span class="btn-icon">üìã</span>
            –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
          </button>
        </div>
      `).join('');
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      list.querySelectorAll('.copy-btn').forEach(btn => {
        btn.onclick = () => {
          navigator.clipboard.writeText(btn.dataset.config)
            .then(() => showToast('–ö–æ–Ω—Ñ–∏–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!'))
            .catch(() => showToast('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è'));
        };
      });
    } else {
      list.className = 'empty-state';
      list.innerHTML = `
        <div class="empty-icon">üîí</div>
        <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN</h3>
        <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π</p>
        <button class="main-btn" onclick="showTopup(${JSON.stringify(user).replace(/"/g, '&quot;')})">
          –ö—É–ø–∏—Ç—å VPN
        </button>
      `;
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ VPN:', e);
    screen.querySelector('#ordersList').className = 'error-state';
    screen.querySelector('#ordersList').innerHTML = `
      <div class="error-icon">‚ö†Ô∏è</div>
      <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
      <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ VPN</p>
    `;
  }
}

async function showTopup(user) {
  transitionToScreen(() => {
    app.innerHTML = '';
    const screen = document.createElement('section');
    screen.id = 'topup';
    screen.className = 'screen active';
  
  screen.innerHTML = `
    <div class="header">
      <button class="back-btn" id="backBtn">‚Üê</button>
      <h2>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</h2>
    </div>
    <div class="topup-container">
      <div class="balance-card">
        <div class="balance-icon">üí∞</div>
        <div class="balance-info">
          <h3>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</h3>
          <p class="balance-amount">‚ÇΩ0</p>
        </div>
      </div>
      
      <form id="topupForm" class="topup-form">
        <div class="form-group">
          <label for="amount" class="form-label">–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (‚ÇΩ)</label>
          <input type="number" min="10" max="10000" required id="amount" class="form-input" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É" />
        </div>
        
        <div class="quick-amounts">
          <button type="button" class="amount-btn" data-amount="100">‚ÇΩ100</button>
          <button type="button" class="amount-btn" data-amount="500">‚ÇΩ500</button>
          <button type="button" class="amount-btn" data-amount="1000">‚ÇΩ1000</button>
          <button type="button" class="amount-btn" data-amount="2000">‚ÇΩ2000</button>
        </div>
        
        <button type="submit" class="main-btn submit-btn">
          <span class="btn-icon">üí≥</span>
          <span>–û–ø–ª–∞—Ç–∏—Ç—å</span>
        </button>
      </form>
      
      <div id="topupResult" class="result-container"></div>
    </div>
  `;
    
    app.appendChild(screen);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    screen.querySelector('#backBtn').onclick = () => {
      addClickAnimation(screen.querySelector('#backBtn'));
      setTimeout(() => showMainMenu(user), 150);
    };
    
    // –ë—ã—Å—Ç—Ä—ã–µ —Å—É–º–º—ã
  screen.querySelectorAll('.amount-btn').forEach(btn => {
    btn.onclick = () => {
      screen.querySelector('#amount').value = btn.dataset.amount;
    };
  });
  
  screen.querySelector('#topupForm').onsubmit = async (e) => {
    e.preventDefault();
    const amount = screen.querySelector('#amount').value;
    const result = screen.querySelector('#topupResult');
    
    result.innerHTML = `
      <div class="loading-state">
        <div class="loading-spinner"></div>
        <p>–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...</p>
      </div>
    `;
    
    try {
      const res = await fetch('https://your-bot-backend/api/topup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(hasWebApp ? { 'X-Telegram-InitData': window.Telegram.WebApp.initData } : {})
        },
        body: JSON.stringify({ user_id: user.id, amount })
      });
      
      const data = await res.json();
      if (data.success && data.pay_url) {
        result.innerHTML = `
          <div class="success-state">
            <div class="success-icon">‚úÖ</div>
            <h3>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω</h3>
            <p>–°—É–º–º–∞: ‚ÇΩ${amount}</p>
            <a href="${data.pay_url}" target="_blank" class="main-btn">
              <span class="btn-icon">üîó</span>
              –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
            </a>
          </div>
        `;
      } else {
        result.innerHTML = `
          <div class="error-state">
            <div class="error-icon">‚ùå</div>
            <h3>–û—à–∏–±–∫–∞</h3>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂</p>
          </div>
        `;
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', e);
      result.innerHTML = `
        <div class="error-state">
          <div class="error-icon">‚ö†Ô∏è</div>
          <h3>–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏</h3>
          <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p>
        </div>
      `;
    }
  };
  });
}

async function showPromo(user) {
  transitionToScreen(() => {
    app.innerHTML = '';
    const screen = document.createElement('section');
    screen.id = 'promo';
    screen.className = 'screen active';
  
  screen.innerHTML = `
    <div class="header">
      <button class="back-btn" id="backBtn">‚Üê</button>
      <h2>–ü—Ä–æ–º–æ–∫–æ–¥</h2>
    </div>
    <div class="promo-container">
      <div class="promo-card">
        <div class="promo-icon">üéÅ</div>
        <h3>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</h3>
        <p>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤</p>
      </div>
      
      <form id="promoForm" class="promo-form">
        <div class="form-group">
          <label for="code" class="form-label">–ü—Ä–æ–º–æ–∫–æ–¥</label>
          <input type="text" required id="code" class="form-input" pattern="[A-Za-z0-9]+" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥" />
        </div>
        
        <button type="submit" class="main-btn submit-btn">
          <span class="btn-icon">‚ú®</span>
          <span>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å</span>
        </button>
      </form>
      
      <div id="promoResult" class="result-container"></div>
      
      <div class="promo-info">
        <h4>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?</h4>
        <ul>
          <li>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</li>
          <li>–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∞–∫—Ü–∏—è—Ö</li>
          <li>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π</li>
        </ul>
      </div>
    </div>
  `;
  
    app.appendChild(screen);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    screen.querySelector('#backBtn').onclick = () => {
      addClickAnimation(screen.querySelector('#backBtn'));
      setTimeout(() => showMainMenu(user), 150);
    };
  screen.querySelector('#promoForm').onsubmit = async (e) => {
    e.preventDefault();
    const code = screen.querySelector('#code').value;
    const result = screen.querySelector('#promoResult');
    
    result.innerHTML = `
      <div class="loading-state">
        <div class="loading-spinner"></div>
        <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞...</p>
      </div>
    `;
    
    try {
      const res = await fetch('https://your-bot-backend/api/promo', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(hasWebApp ? { 'X-Telegram-InitData': window.Telegram.WebApp.initData } : {})
        },
        body: JSON.stringify({ user_id: user.id, code })
      });
      
      const data = await res.json();
      if (data.success) {
        result.innerHTML = `
          <div class="success-state">
            <div class="success-icon">üéâ</div>
            <h3>–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</h3>
            <p>${data.message || '–ë–æ–Ω—É—Å –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å'}</p>
          </div>
        `;
        screen.querySelector('#code').value = '';
      } else {
        result.innerHTML = `
          <div class="error-state">
            <div class="error-icon">‚ùå</div>
            <h3>–û—à–∏–±–∫–∞</h3>
            <p>${data.error || '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}</p>
          </div>
        `;
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', e);
      result.innerHTML = `
        <div class="error-state">
          <div class="error-icon">‚ö†Ô∏è</div>
          <h3>–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏</h3>
          <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p>
        </div>
      `;
    }
  };
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
function attachStartHandler() {
  const startBtn = document.getElementById('startBtn');
  if (!startBtn) {
    console.warn('–ö–Ω–æ–ø–∫–∞ #startBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return false;
  }

  console.log('–ù–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫...');
  
  // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  startBtn.onclick = async () => {
    console.log('–ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å" –Ω–∞–∂–∞—Ç–∞');
    try {
      if (hasWebApp) {
        window.Telegram.WebApp.expand();
        const user = window.Telegram.WebApp.initDataUnsafe?.user;
        if (user) {
          await showMainMenu(user);
        } else {
          console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º');
          await showMainMenu({ first_name: '–¢–µ—Å—Ç', id: 0 });
        }
      } else {
        console.log('–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
        await showMainMenu({ first_name: '–ì–æ—Å—Ç—å', id: 0 });
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞:', err);
      showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é');
    }
  };

  console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  return true;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
console.log('–ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ...');

// –ü—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É
if (!attachStartHandler()) {
  console.log('–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∂–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É DOM...');
  
  // –ü—Ä–æ–±—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  window.addEventListener('load', () => {
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...');
    if (!attachStartHandler()) {
      console.log('–ö–Ω–æ–ø–∫–∞ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å...');
      
      // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
      const observer = new MutationObserver((mutations, obs) => {
        if (attachStartHandler()) {
          console.log('–ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ MutationObserver');
          obs.disconnect();
        }
      });

      observer.observe(document.body, {
        childList: true,
        subtree: true
      });

      // –°–æ–æ–±—â–∏–º, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è
      setTimeout(() => {
        if (!document.getElementById('startBtn')) {
          console.warn('–ö–Ω–æ–ø–∫–∞ #startBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ 5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è');
        }
      }, 5000);
    }
  });
}