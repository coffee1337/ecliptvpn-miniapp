// EcliptVPN Mini App - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EcliptVPN Mini App...');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const app = document.getElementById('app');
const overlays = document.getElementById('ui-overlays');
const hasWebApp = Boolean(window.Telegram?.WebApp);

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const mockData = {
  user: {
    id: 12345,
    first_name: '–ê–ª–µ–∫—Å–µ–π',
    last_name: '–ü–µ—Ç—Ä–æ–≤',
    username: 'alex_petrov'
  },
  profile: {
    balance: 2500,
    status: 'Premium',
    vpn_count: 3,
    join_date: '2024-01-15'
  },
  vpns: [
    {
      id: 1,
      plan: 'Premium VPN',
      country: 'üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
      server: 'Amsterdam-01',
      expiry: '2024-12-31',
      status: 'active',
      speed: '1000 Mbps',
      ping: '12ms',
      config: 'vpn://config1.example.com'
    },
    {
      id: 2,
      plan: 'Standard VPN',
      country: 'üá∫üá∏ –°–®–ê',
      server: 'New York-02',
      expiry: '2024-11-15',
      status: 'active',
      speed: '500 Mbps',
      ping: '45ms',
      config: 'vpn://config2.example.com'
    },
    {
      id: 3,
      plan: 'Basic VPN',
      country: 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è',
      server: 'Berlin-01',
      expiry: '2024-10-20',
      status: 'expired',
      speed: '100 Mbps',
      ping: '25ms',
      config: 'vpn://config3.example.com'
    }
  ],
  servers: [
    { id: 1, country: 'üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã', city: '–ê–º—Å—Ç–µ—Ä–¥–∞–º', ping: '12ms', load: 23 },
    { id: 2, country: 'üá∫üá∏ –°–®–ê', city: '–ù—å—é-–ô–æ—Ä–∫', ping: '45ms', load: 67 },
    { id: 3, country: 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è', city: '–ë–µ—Ä–ª–∏–Ω', ping: '25ms', load: 45 },
    { id: 4, country: 'üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', city: '–õ–æ–Ω–¥–æ–Ω', ping: '18ms', load: 34 },
    { id: 5, country: 'üáØüáµ –Ø–ø–æ–Ω–∏—è', city: '–¢–æ–∫–∏–æ', ping: '89ms', load: 12 },
    { id: 6, country: 'üá∏üá¨ –°–∏–Ω–≥–∞–ø—É—Ä', city: '–°–∏–Ω–≥–∞–ø—É—Ä', ping: '156ms', load: 8 }
  ],
  plans: [
    { id: 1, name: 'Basic', price: 299, duration: '–º–µ—Å—è—Ü', features: ['100 Mbps', '1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '5 —Å—Ç—Ä–∞–Ω'] },
    { id: 2, name: 'Standard', price: 599, duration: '–º–µ—Å—è—Ü', features: ['500 Mbps', '3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', '15 —Å—Ç—Ä–∞–Ω'] },
    { id: 3, name: 'Premium', price: 999, duration: '–º–µ—Å—è—Ü', features: ['1000 Mbps', '5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤', '30 —Å—Ç—Ä–∞–Ω'] }
  ]
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let currentScreen = 'welcome';
let currentUser = null;
let selectedServer = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
if (hasWebApp) {
  window.Telegram.WebApp.ready();
  window.Telegram.WebApp.expand();
  currentUser = window.Telegram.WebApp.initDataUnsafe?.user || mockData.user;
  console.log('‚úÖ Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} else {
  currentUser = mockData.user;
  console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
}

// –£—Ç–∏–ª–∏—Ç—ã
function showToast(message, type = 'info', duration = 3000) {
  const toast = document.createElement('div');
  toast.className = `toast toast-${type}`;
  toast.innerHTML = `
    <div class="toast-content">
      <span class="toast-icon">${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}</span>
      <span>${message}</span>
    </div>
  `;
  overlays.appendChild(toast);
  
  setTimeout(() => {
    toast.style.opacity = '0';
    setTimeout(() => toast.remove(), 300);
  }, duration);
}

function addClickAnimation(element) {
  element.style.transform = 'scale(0.95)';
  setTimeout(() => {
    element.style.transform = '';
  }, 150);
}

function transitionToScreen(screenName, callback) {
  const currentScreenEl = app.querySelector('.screen.active');
  if (currentScreenEl) {
    currentScreenEl.style.opacity = '0';
    currentScreenEl.style.transform = 'translateY(20px) scale(0.95)';
    setTimeout(() => {
      currentScreen = screenName;
      callback();
    }, 200);
  } else {
    currentScreen = screenName;
    callback();
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu() {
  transitionToScreen('main', () => {
    app.innerHTML = `
      <div class="screen active">
        <div class="header">
          <h1>EcliptVPN</h1>
        </div>
        
        <div class="welcome-section">
          <div class="welcome-text">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,</div>
          <div class="user-name">${currentUser.first_name}!</div>
        </div>
        
        <div class="nav-buttons">
          <div class="nav-btn" onclick="showProfile()">
            <div class="nav-btn-icon">üë§</div>
            <div class="nav-btn-text">–ü—Ä–æ—Ñ–∏–ª—å</div>
          </div>
          <div class="nav-btn" onclick="showVPNs()">
            <div class="nav-btn-icon">üîí</div>
            <div class="nav-btn-text">–ú–æ–∏ VPN</div>
          </div>
          <div class="nav-btn" onclick="showServers()">
            <div class="nav-btn-icon">üåç</div>
            <div class="nav-btn-text">–°–µ—Ä–≤–µ—Ä—ã</div>
          </div>
          <div class="nav-btn" onclick="showPlans()">
            <div class="nav-btn-icon">üí≥</div>
            <div class="nav-btn-text">–¢–∞—Ä–∏—Ñ—ã</div>
          </div>
        </div>
        
        <div class="card">
          <h3 style="margin-bottom: 16px; color: var(--primary);">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-value">${mockData.profile.vpn_count}</div>
              <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö VPN</div>
            </div>
            <div class="stat-card">
              <div class="stat-value">‚ÇΩ${mockData.profile.balance}</div>
              <div class="stat-label">–ë–∞–ª–∞–Ω—Å</div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="bottom-nav">
        <div class="nav-item active" onclick="showMainMenu()">
          <div class="nav-item-icon">üè†</div>
          <div class="nav-item-text">–ì–ª–∞–≤–Ω–∞—è</div>
        </div>
        <div class="nav-item" onclick="showVPNs()">
          <div class="nav-item-icon">üîí</div>
          <div class="nav-item-text">VPN</div>
        </div>
        <div class="nav-item" onclick="showServers()">
          <div class="nav-item-icon">üåç</div>
          <div class="nav-item-text">–°–µ—Ä–≤–µ—Ä—ã</div>
        </div>
        <div class="nav-item" onclick="showProfile()">
          <div class="nav-item-icon">üë§</div>
          <div class="nav-item-text">–ü—Ä–æ—Ñ–∏–ª—å</div>
        </div>
      </div>
    `;
    
    updateBottomNav('main');
  });
}

// –ü—Ä–æ—Ñ–∏–ª—å
function showProfile() {
  transitionToScreen('profile', () => {
    app.innerHTML = `
      <div class="screen active profile">
        <div class="header">
          <div class="back-btn" onclick="showMainMenu()">‚Üê</div>
          <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
        </div>
        
        <div class="profile-card">
          <div class="profile-avatar">
            ${currentUser.first_name.charAt(0)}
          </div>
          <div class="profile-info">
            <h3>${currentUser.first_name} ${currentUser.last_name}</h3>
            <p class="profile-id">ID: ${currentUser.id}</p>
            <div class="status-badge">${mockData.profile.status}</div>
          </div>
        </div>
        
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">‚ÇΩ${mockData.profile.balance}</div>
            <div class="stat-label">–ë–∞–ª–∞–Ω—Å</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${mockData.profile.vpn_count}</div>
            <div class="stat-label">VPN</div>
          </div>
        </div>
        
        <div class="card">
          <h3 style="margin-bottom: 16px; color: var(--primary);">üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
          <div class="detail-row">
            <span class="detail-label">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
            <span class="detail-value">${mockData.profile.join_date}</span>
          </div>
          <div class="detail-row">
            <span class="detail-label">–°—Ç–∞—Ç—É—Å:</span>
            <span class="detail-value">${mockData.profile.status}</span>
          </div>
        </div>
        
        <div class="card">
          <h3 style="margin-bottom: 16px; color: var(--primary);">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
          <button class="main-btn" onclick="showToast('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info')">
            <span class="btn-icon">‚öôÔ∏è</span>
            <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
          </button>
        </div>
      </div>
      
      <div class="bottom-nav">
        <div class="nav-item" onclick="showMainMenu()">
          <div class="nav-item-icon">üè†</div>
          <div class="nav-item-text">–ì–ª–∞–≤–Ω–∞—è</div>
        </div>
        <div class="nav-item" onclick="showVPNs()">
          <div class="nav-item-icon">üîí</div>
          <div class="nav-item-text">VPN</div>
        </div>
        <div class="nav-item" onclick="showServers()">
          <div class="nav-item-icon">üåç</div>
          <div class="nav-item-text">–°–µ—Ä–≤–µ—Ä—ã</div>
        </div>
        <div class="nav-item active" onclick="showProfile()">
          <div class="nav-item-icon">üë§</div>
          <div class="nav-item-text">–ü—Ä–æ—Ñ–∏–ª—å</div>
        </div>
      </div>
    `;
    
    updateBottomNav('profile');
  });
}

// –ú–æ–∏ VPN
function showVPNs() {
  transitionToScreen('orders', () => {
    app.innerHTML = `
      <div class="screen active orders">
        <div class="header">
          <div class="back-btn" onclick="showMainMenu()">‚Üê</div>
          <h2>–ú–æ–∏ VPN</h2>
        </div>
        
        <div class="vpn-list">
          ${mockData.vpns.map(vpn => `
            <div class="vpn-card ${vpn.status}">
              <div class="vpn-header">
                <div class="vpn-icon">üîí</div>
                <div class="vpn-info">
                  <div class="vpn-plan">${vpn.plan}</div>
                  <div class="vpn-country">${vpn.country}</div>
                </div>
                <div class="vpn-status">${vpn.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ò—Å—Ç–µ–∫'}</div>
              </div>
              <div class="vpn-details">
                <div class="detail-row">
                  <span class="detail-label">–°–µ—Ä–≤–µ—Ä:</span>
                  <span class="detail-value">${vpn.server}</span>
                </div>
                <div class="detail-row">
                  <span class="detail-label">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                  <span class="detail-value">${vpn.speed}</span>
                </div>
                <div class="detail-row">
                  <span class="detail-label">–ü–∏–Ω–≥:</span>
                  <span class="detail-value">${vpn.ping}</span>
                </div>
                <div class="detail-row">
                  <span class="detail-label">–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</span>
                  <span class="detail-value">${vpn.expiry}</span>
                </div>
              </div>
              <button class="main-btn" onclick="copyConfig('${vpn.config}')">
                <span class="btn-icon">üìã</span>
                <span>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥</span>
              </button>
            </div>
          `).join('')}
        </div>
      </div>
      
      <div class="bottom-nav">
        <div class="nav-item" onclick="showMainMenu()">
          <div class="nav-item-icon">üè†</div>
          <div class="nav-item-text">–ì–ª–∞–≤–Ω–∞—è</div>
        </div>
        <div class="nav-item active" onclick="showVPNs()">
          <div class="nav-item-icon">üîí</div>
          <div class="nav-item-text">VPN</div>
        </div>
        <div class="nav-item" onclick="showServers()">
          <div class="nav-item-icon">üåç</div>
          <div class="nav-item-text">–°–µ—Ä–≤–µ—Ä—ã</div>
        </div>
        <div class="nav-item" onclick="showProfile()">
          <div class="nav-item-icon">üë§</div>
          <div class="nav-item-text">–ü—Ä–æ—Ñ–∏–ª—å</div>
        </div>
      </div>
    `;
    
    updateBottomNav('vpn');
  });
}

// –°–µ—Ä–≤–µ—Ä—ã
function showServers() {
  transitionToScreen('servers', () => {
    app.innerHTML = `
      <div class="screen active servers">
        <div class="header">
          <div class="back-btn" onclick="showMainMenu()">‚Üê</div>
          <h2>–°–µ—Ä–≤–µ—Ä—ã</h2>
        </div>
        
        <div class="card">
          <h3 style="margin-bottom: 16px; color: var(--primary);">üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä</h3>
          <div class="server-list">
            ${mockData.servers.map(server => `
              <div class="server-item ${selectedServer?.id === server.id ? 'selected' : ''}" 
                   onclick="selectServer(${server.id})">
                <div class="server-info">
                  <div class="server-country">${server.country}</div>
                  <div class="server-city">${server.city}</div>
                </div>
                <div class="server-stats">
                  <div class="server-ping">${server.ping}</div>
                  <div class="server-load">${server.load}%</div>
                </div>
                <div class="server-status">
                  ${selectedServer?.id === server.id ? '‚úÖ' : '‚ö™'}
                </div>
              </div>
            `).join('')}
          </div>
        </div>
        
        ${selectedServer ? `
          <div class="card">
            <h3 style="margin-bottom: 16px; color: var(--primary);">üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</h3>
            <div class="connection-info">
              <div class="detail-row">
                <span class="detail-label">–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:</span>
                <span class="detail-value">${selectedServer.country} - ${selectedServer.city}</span>
              </div>
              <div class="detail-row">
                <span class="detail-label">–ü–∏–Ω–≥:</span>
                <span class="detail-value">${selectedServer.ping}</span>
              </div>
              <div class="detail-row">
                <span class="detail-label">–ù–∞–≥—Ä—É–∑–∫–∞:</span>
                <span class="detail-value">${selectedServer.load}%</span>
              </div>
            </div>
            <button class="main-btn" onclick="connectToServer()">
              <span class="btn-icon">üîó</span>
              <span>–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è</span>
            </button>
          </div>
        ` : ''}
      </div>
      
      <div class="bottom-nav">
        <div class="nav-item" onclick="showMainMenu()">
          <div class="nav-item-icon">üè†</div>
          <div class="nav-item-text">–ì–ª–∞–≤–Ω–∞—è</div>
        </div>
        <div class="nav-item" onclick="showVPNs()">
          <div class="nav-item-icon">üîí</div>
          <div class="nav-item-text">VPN</div>
        </div>
        <div class="nav-item active" onclick="showServers()">
          <div class="nav-item-icon">üåç</div>
          <div class="nav-item-text">–°–µ—Ä–≤–µ—Ä—ã</div>
        </div>
        <div class="nav-item" onclick="showProfile()">
          <div class="nav-item-icon">üë§</div>
          <div class="nav-item-text">–ü—Ä–æ—Ñ–∏–ª—å</div>
        </div>
      </div>
    `;
    
    updateBottomNav('servers');
  });
}

// –¢–∞—Ä–∏—Ñ—ã
function showPlans() {
  transitionToScreen('plans', () => {
    app.innerHTML = `
      <div class="screen active plans">
        <div class="header">
          <div class="back-btn" onclick="showMainMenu()">‚Üê</div>
          <h2>–¢–∞—Ä–∏—Ñ—ã</h2>
        </div>
        
        <div class="plans-list">
          ${mockData.plans.map(plan => `
            <div class="plan-card ${plan.name === 'Premium' ? 'featured' : ''}">
              ${plan.name === 'Premium' ? '<div class="plan-badge">–ü–æ–ø—É–ª—è—Ä–Ω—ã–π</div>' : ''}
              <div class="plan-header">
                <div class="plan-name">${plan.name}</div>
                <div class="plan-price">‚ÇΩ${plan.price}<span class="plan-period">/${plan.duration}</span></div>
              </div>
              <div class="plan-features">
                ${plan.features.map(feature => `
                  <div class="plan-feature">‚úÖ ${feature}</div>
                `).join('')}
              </div>
              <button class="main-btn" onclick="selectPlan(${plan.id})">
                <span class="btn-icon">üí≥</span>
                <span>–í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω</span>
              </button>
            </div>
          `).join('')}
        </div>
        
        <div class="card">
          <h3 style="margin-bottom: 16px; color: var(--primary);">üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</h3>
          <div class="benefits-list">
            <div class="benefit-item">üîí 256-bit —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ</div>
            <div class="benefit-item">üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å</div>
            <div class="benefit-item">üåç 30+ —Å—Ç—Ä–∞–Ω</div>
            <div class="benefit-item">üì± –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</div>
            <div class="benefit-item">üõ°Ô∏è –ë–µ–∑ –ª–æ–≥–æ–≤</div>
          </div>
        </div>
      </div>
      
      <div class="bottom-nav">
        <div class="nav-item" onclick="showMainMenu()">
          <div class="nav-item-icon">üè†</div>
          <div class="nav-item-text">–ì–ª–∞–≤–Ω–∞—è</div>
        </div>
        <div class="nav-item" onclick="showVPNs()">
          <div class="nav-item-icon">üîí</div>
          <div class="nav-item-text">VPN</div>
        </div>
        <div class="nav-item" onclick="showServers()">
          <div class="nav-item-icon">üåç</div>
          <div class="nav-item-text">–°–µ—Ä–≤–µ—Ä—ã</div>
        </div>
        <div class="nav-item" onclick="showProfile()">
          <div class="nav-item-icon">üë§</div>
          <div class="nav-item-text">–ü—Ä–æ—Ñ–∏–ª—å</div>
        </div>
      </div>
    `;
    
    updateBottomNav('plans');
  });
}

// –§—É–Ω–∫—Ü–∏–∏
function selectServer(serverId) {
  selectedServer = mockData.servers.find(s => s.id === serverId);
  showServers();
  showToast(`–í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: ${selectedServer.country}`, 'success');
}

function connectToServer() {
  if (!selectedServer) {
    showToast('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä', 'error');
    return;
  }
  
  showToast('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...', 'info');
  
  setTimeout(() => {
    showToast(`–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${selectedServer.country}!`, 'success');
  }, 2000);
}

function selectPlan(planId) {
  const plan = mockData.plans.find(p => p.id === planId);
  showToast(`–í—ã–±—Ä–∞–Ω –ø–ª–∞–Ω: ${plan.name}`, 'success');
  
  // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
  setTimeout(() => {
    showToast('–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!', 'success');
  }, 1500);
}

function copyConfig(config) {
  navigator.clipboard.writeText(config).then(() => {
    showToast('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
  }).catch(() => {
    showToast('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
  });
}

function updateBottomNav(activeItem) {
  document.querySelectorAll('.nav-item').forEach(item => {
    item.classList.remove('active');
  });
  
  const activeNavItem = document.querySelector(`[onclick*="${activeItem}"]`);
  if (activeNavItem) {
    activeNavItem.classList.add('active');
  }
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
function showWelcome() {
  app.innerHTML = `
    <div class="screen active">
      <div class="welcome-section" style="text-align: center; margin-top: 20vh;">
        <div class="logo-anim">
          <div style="font-size: 4rem; margin-bottom: 20px;">üîí</div>
          <h1 style="font-size: 2.5rem; margin-bottom: 10px; background: linear-gradient(135deg, var(--primary), var(--primary-dark)); -webkit-background-clip: text; -webkit-text-fill-color: transparent;">EcliptVPN</h1>
          <p style="color: var(--text-secondary); font-size: 1.1rem; margin-bottom: 40px;">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. –°–≤–æ–±–æ–¥–∞. –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å.</p>
        </div>
        <button class="main-btn" onclick="showMainMenu()" style="font-size: 1.1rem; padding: 16px 32px;">
          <span class="btn-icon">üöÄ</span>
          <span>–ù–∞—á–∞—Ç—å</span>
        </button>
      </div>
    </div>
  `;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
  console.log('üì± DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
  showWelcome();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
window.showMainMenu = showMainMenu;
window.showProfile = showProfile;
window.showVPNs = showVPNs;
window.showServers = showServers;
window.showPlans = showPlans;
window.selectServer = selectServer;
window.connectToServer = connectToServer;
window.selectPlan = selectPlan;
window.copyConfig = copyConfig;

console.log('‚úÖ EcliptVPN Mini App –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');